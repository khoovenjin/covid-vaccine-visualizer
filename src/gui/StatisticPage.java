/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import classes.VaxRegistration;
import classesstate.VaxState;
import dataset.VaxData2;
import dataset.VaxRegData2;
import dataset.env;
import function.DateReformat;
import function.FunctionalUtil;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.text.ParseException;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author venji
 */
public class StatisticPage extends javax.swing.JFrame {

    /**
     * Creates new form StatisticPage
     */
    public StatisticPage() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        spenterbtn.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spmainscrollpane = new javax.swing.JScrollPane();
        sppanel = new javax.swing.JPanel();
        sptitle = new javax.swing.JLabel();
        sptitlestudent = new javax.swing.JLabel();
        spfiltercb = new javax.swing.JComboBox<>();
        spenterbtn = new javax.swing.JButton();
        spbackbtn = new javax.swing.JButton();
        spchart = new javax.swing.JPanel();
        spscrollpane1 = new javax.swing.JScrollPane();
        sptable1 = new javax.swing.JTable();
        spscrollpane2 = new javax.swing.JScrollPane();
        sptable2 = new javax.swing.JTable();
        splabeltable1 = new javax.swing.JLabel();
        splabeltable2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sppanel.setBackground(new java.awt.Color(60, 60, 60));

        sptitle.setFont(new java.awt.Font("72 Black", 1, 26)); // NOI18N
        sptitle.setForeground(new java.awt.Color(255, 255, 255));
        sptitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sptitle.setText("Covid-19 Statistics in Malaysia");

        sptitlestudent.setFont(new java.awt.Font("72 Black", 1, 22)); // NOI18N
        sptitlestudent.setForeground(new java.awt.Color(255, 255, 255));
        sptitlestudent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sptitlestudent.setText("-Khoo Ven Jin TP051207-");

        spfiltercb.setFont(new java.awt.Font("72 Black", 1, 16)); // NOI18N
        spfiltercb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vaccination and Registration Records in Malaysia", "Sum of Monthly Fully Vaccinated people by State", "Highest or Lowest Weekly Adult and Child Vaccination", "Total number of Weekly Vaccination by Vaccine Type" }));

        spenterbtn.setFont(new java.awt.Font("72 Black", 1, 16)); // NOI18N
        spenterbtn.setText("Enter");
        spenterbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spenterbtnActionPerformed(evt);
            }
        });

        spbackbtn.setFont(new java.awt.Font("72 Black", 1, 16)); // NOI18N
        spbackbtn.setText("Go Back");
        spbackbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spbackbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout spchartLayout = new javax.swing.GroupLayout(spchart);
        spchart.setLayout(spchartLayout);
        spchartLayout.setHorizontalGroup(
            spchartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1016, Short.MAX_VALUE)
        );
        spchartLayout.setVerticalGroup(
            spchartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 375, Short.MAX_VALUE)
        );

        sptable1.setFont(new java.awt.Font("72 Black", 1, 16)); // NOI18N
        sptable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        spscrollpane1.setViewportView(sptable1);

        sptable2.setFont(new java.awt.Font("72 Black", 1, 16)); // NOI18N
        sptable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        spscrollpane2.setViewportView(sptable2);

        splabeltable1.setFont(new java.awt.Font("72 Black", 1, 22)); // NOI18N
        splabeltable1.setForeground(new java.awt.Color(255, 255, 255));
        splabeltable1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        splabeltable1.setText("Table 1");

        splabeltable2.setFont(new java.awt.Font("72 Black", 1, 22)); // NOI18N
        splabeltable2.setForeground(new java.awt.Color(255, 255, 255));
        splabeltable2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        splabeltable2.setText("Table 2");

        javax.swing.GroupLayout sppanelLayout = new javax.swing.GroupLayout(sppanel);
        sppanel.setLayout(sppanelLayout);
        sppanelLayout.setHorizontalGroup(
            sppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sppanelLayout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addGroup(sppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(splabeltable2, javax.swing.GroupLayout.PREFERRED_SIZE, 1016, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(sppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(sppanelLayout.createSequentialGroup()
                            .addComponent(spscrollpane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1016, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sppanelLayout.createSequentialGroup()
                            .addGroup(sppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(spscrollpane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1016, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(sppanelLayout.createSequentialGroup()
                                    .addGap(14, 14, 14)
                                    .addGroup(sppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(sptitlestudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(sppanelLayout.createSequentialGroup()
                                            .addGap(103, 103, 103)
                                            .addComponent(spfiltercb, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(58, 58, 58)
                                            .addGroup(sppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(spenterbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(spbackbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(0, 133, Short.MAX_VALUE))
                                        .addComponent(sptitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(sppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(spchart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(splabeltable1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1016, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(65, 65, 65)))))
        );
        sppanelLayout.setVerticalGroup(
            sppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sppanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sptitle, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sptitlestudent, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(sppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spfiltercb, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spenterbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spbackbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(spchart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(splabeltable1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(spscrollpane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(splabeltable2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(spscrollpane2, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        spmainscrollpane.setViewportView(sppanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(spmainscrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 1151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spmainscrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 741, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void spbackbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spbackbtnActionPerformed
        this.setVisible(false);
        new Dashboard().setVisible(true);
    }//GEN-LAST:event_spbackbtnActionPerformed

    private void spenterbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spenterbtnActionPerformed
        int selection = spfiltercb.getSelectedIndex();
        
        switch(selection){
            default:
                spfiltercb.setSelectedIndex(0);
            case 0: {
                List<VaxState<Date, Integer>> dataset = VaxData2.getAllVaxData();
                List<VaxRegistration<Date, String, Integer>> dataset2 = VaxRegData2.getAllVaxRegData();
                List<VaxState<Date, Integer>> chartset = FunctionalUtil.getStateEqualsName(dataset, "Malaysia");
                List<VaxRegistration<Date, String, Integer>> chartsetreg = FunctionalUtil.getStateEqualsNameReg(dataset2, "Malaysia");
                
                DefaultCategoryDataset chartDataset = new DefaultCategoryDataset();
                
                String series1 = "Cummulative Vaccination";
                String series2 = "Total Registation";
                
                for (int i = 0; i < chartset.size(); i++) {
                    VaxState<Date, Integer> chartvaxstate = chartset.get(i);
                    chartDataset.setValue(chartvaxstate.getCumulative(), series1, DateReformat.convertDateAsString(chartvaxstate.getDate()));
                }
                
                for (int i = 0; i < chartsetreg.size(); i++) {
                    VaxRegistration<Date, String, Integer> chartvaxregstate = chartsetreg.get(i);
                    chartDataset.setValue(chartvaxregstate.getTotal(), series2, DateReformat.convertDateAsString(chartvaxregstate.getDate()));
                }
                
                JFreeChart chart = ChartFactory.createLineChart("Graph of Cummulative Vaccination and Total Registration Count in Malaysia against Date", "Date", "Total Count", chartDataset);
                CategoryPlot plot = chart.getCategoryPlot();
                LineAndShapeRenderer renderer = new LineAndShapeRenderer();
                plot.setRenderer(renderer);
                ChartPanel cp = new ChartPanel(chart);
                cp.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
                cp.setBackground(Color.white);
                cp.setRangeZoomable(true);
                cp.setDomainZoomable(true);
                spchart.setLayout(new BorderLayout());
                spchart.add(cp, BorderLayout.NORTH);
                
                String[][] data = new String[dataset.size()][36];
                String[][] data2 = new String[dataset2.size()][14];

                for (int i = 0; i < dataset.size(); i++) {
                    VaxState<Date, Integer> vaxstate = dataset.get(i);
                    
                    // Table data
                    data[i][0] = String.valueOf(i + 1 + ".");
                    data[i][1] = DateReformat.convertDateAsString(vaxstate.getDate());
                    data[i][2] = vaxstate.state.value();
                    data[i][3] = String.valueOf(vaxstate.getDailyPartial());
                    data[i][4] = String.valueOf(vaxstate.getDailyFull());
                    data[i][5] = String.valueOf(vaxstate.getDailyBooster());
                    data[i][6] = String.valueOf(vaxstate.getDaily());
                    data[i][7] = String.valueOf(vaxstate.getDailyPartialAdult());
                    data[i][8] = String.valueOf(vaxstate.getDailyFullAdult());
                    data[i][9] = String.valueOf(vaxstate.getDailyPartialChild());
                    data[i][10] = String.valueOf(vaxstate.getDailyFullChild());
                    data[i][11] = String.valueOf(vaxstate.getCumulativePartial());
                    data[i][12] = String.valueOf(vaxstate.getCumulativeFull());
                    data[i][13] = String.valueOf(vaxstate.getCumulativeBooster());
                    data[i][14] = String.valueOf(vaxstate.getCumulative());
                    data[i][15] = String.valueOf(vaxstate.getCumulativePartialAdult());
                    data[i][16] = String.valueOf(vaxstate.getCumulativeFullAdult());
                    data[i][17] = String.valueOf(vaxstate.getCumulativePartialChild());
                    data[i][18] = String.valueOf(vaxstate.getCumulativeFullChild());
                    data[i][19] = String.valueOf(vaxstate.getPhizer1());
                    data[i][20] = String.valueOf(vaxstate.getPhizer2());
                    data[i][21] = String.valueOf(vaxstate.getPhizer3());
                    data[i][22] = String.valueOf(vaxstate.getSinovac1());
                    data[i][23] = String.valueOf(vaxstate.getSinovac2());
                    data[i][24] = String.valueOf(vaxstate.getSinovac3());
                    data[i][25] = String.valueOf(vaxstate.getAstra1());
                    data[i][26] = String.valueOf(vaxstate.getAstra2());
                    data[i][27] = String.valueOf(vaxstate.getAstra3());
                    data[i][28] = String.valueOf(vaxstate.getSinopharm1());
                    data[i][29] = String.valueOf(vaxstate.getSinopharm2());
                    data[i][30] = String.valueOf(vaxstate.getSinopharm3());
                    data[i][31] = String.valueOf(vaxstate.getCansino());
                    data[i][32] = String.valueOf(vaxstate.getCansino3());
                    data[i][33] = String.valueOf(vaxstate.getPending1());
                    data[i][34] = String.valueOf(vaxstate.getPending2());
                    data[i][35] = String.valueOf(vaxstate.getPending3());
                }
                
                for (int p = 0; p < dataset2.size(); p++) {
                    VaxRegistration<Date, String, Integer> vaxregstate = dataset2.get(p);
                    
                    // Table data
                    data2[p][0] = String.valueOf(p + 1 + ".");
                    data2[p][1] = DateReformat.convertDateAsString(vaxregstate.getDate());
                    data2[p][2] = vaxregstate.getState();
                    data2[p][3] = String.valueOf(vaxregstate.getTotal());
                    data2[p][4] = String.valueOf(vaxregstate.getPhase2());
                    data2[p][5] = String.valueOf(vaxregstate.getMysj());
                    data2[p][6] = String.valueOf(vaxregstate.getCall());
                    data2[p][7] = String.valueOf(vaxregstate.getWeb());
                    data2[p][8] = String.valueOf(vaxregstate.getChildren());
                    data2[p][9] = String.valueOf(vaxregstate.getChildrenSolo());
                    data2[p][10] = String.valueOf(vaxregstate.getAdolescents());
                    data2[p][11] = String.valueOf(vaxregstate.getElderly());
                    data2[p][12] = String.valueOf(vaxregstate.getComorb());
                    data2[p][13] = String.valueOf(vaxregstate.getOku());
                }
                splabeltable1.setVisible(true);
                splabeltable1.setText("Vaccination Records in Malaysia");
                splabeltable1.setHorizontalAlignment(JLabel.CENTER);
                
                spscrollpane2.setVisible(true);
                splabeltable2.setVisible(true);
                splabeltable2.setText("Vaccination Registration Records in Malaysia");
                splabeltable2.setHorizontalAlignment(JLabel.CENTER);
                
                DefaultTableModel model = new DefaultTableModel(data,
                        env.DATA_COL_VAX.clone()) {
                    @Override
                    public Class getColumnClass(int column) {
                        return String.class;
                    }

                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                sptable1.setModel(model);
                sptable1.setRowHeight(30);
                Font bigFont = new Font("calibri", Font.BOLD, 17);
                sptable1.getTableHeader().setFont(bigFont);
                
                DefaultTableModel model2 = new DefaultTableModel(data,
                        env.DATA_COL_REG.clone()) {
                    @Override
                    public Class getColumnClass(int column) {
                        return String.class;
                    }

                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                sptable2.setModel(model2);
                sptable2.setRowHeight(30);
                sptable2.getTableHeader().setFont(bigFont);
                
                TableRowSorter trs = new TableRowSorter(model);

                class IntComparator implements Comparator {

                    public int compare(Object o1, Object o2) {
                        Integer int1 = Integer.parseInt(o1.toString());
                        Integer int2 = Integer.parseInt(o2.toString());
                        return int1.compareTo(int2);
                    }

                    public boolean equals(Object o2) {
                        return this.equals(o2);
                    }
                }

                trs.setComparator(2, new IntComparator());
                sptable1.setRowSorter(trs);
                sptable1.getColumnModel().getColumn(0).setPreferredWidth(70);
                sptable2.setRowSorter(trs);
                sptable2.getColumnModel().getColumn(0).setPreferredWidth(70);
                for(int x=1; x< 36; x++){
                    if(x==1){
                        sptable1.getColumnModel().getColumn(x).setPreferredWidth(130);
                    } else if(x==2){
                        sptable1.getColumnModel().getColumn(x).setPreferredWidth(190);
                    } else{
                        sptable1.getColumnModel().getColumn(x).setPreferredWidth(200);
                    }
                }
                
                for(int x=1; x< 14; x++){
                    if(x==1){
                        sptable2.getColumnModel().getColumn(x).setPreferredWidth(130);
                    } else if(x==2){
                        sptable2.getColumnModel().getColumn(x).setPreferredWidth(190);
                    } else{
                        sptable2.getColumnModel().getColumn(x).setPreferredWidth(130);
                    }
                }
                
                DefaultTableCellRenderer centerrenderer = new DefaultTableCellRenderer();
                centerrenderer.setHorizontalAlignment(JLabel.CENTER);
                for(int y=0; y< 36; y++){
                    sptable1.getColumnModel().getColumn(y).setCellRenderer(centerrenderer);
                }
                
                for(int y=0; y< 14; y++){
                    sptable2.getColumnModel().getColumn(y).setCellRenderer(centerrenderer);
                }
                sptable1.setAutoCreateRowSorter(false);
                sptable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

                sptable2.setAutoCreateRowSorter(false);
                sptable2.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                
                spscrollpane1.setPreferredSize(new Dimension(550, 250));
                spscrollpane1.getVerticalScrollBar().setValue(0);
                spscrollpane1.getHorizontalScrollBar().setValue(0);
                
                spscrollpane2.setPreferredSize(new Dimension(550, 250));
                spscrollpane2.getVerticalScrollBar().setValue(0);
                spscrollpane2.getHorizontalScrollBar().setValue(0);
                
                spchart.setVisible(true);
                break;
            }
            case 1: {
                List<VaxState<Date, Integer>> dataset = VaxData2.getAllVaxData();
                
                String[] distinctstate = env.STATES.clone();
                
                // Monthly Data table
                List<String> formattedMonthlyDate = FunctionalUtil.getReformattedMonthlyDate(dataset);
                
                String[] table1Columns = new String[formattedMonthlyDate.size() + 2];
                
                table1Columns[0] = "No.";
                table1Columns[1] = "State";
                for (int j = 0; j < formattedMonthlyDate.size(); j++) {
                    try {
                        table1Columns[j + 2] = DateReformat.convertDateToMonthFormat(formattedMonthlyDate.get(j));
                    } catch (ParseException ex) {
                        ex.printStackTrace();
                    }
                }
                
                String[][] data = new String[distinctstate.length][table1Columns.length];
                
                for (int i = 0; i < distinctstate.length; i++) {
                    String vaxstate = distinctstate[i];
                    
                    // Table data
                    data[i][0] = String.valueOf(i + 1 + ".");
                    data[i][1] = vaxstate;
                    for (int j = 0; j < formattedMonthlyDate.size(); j++) {
                        Integer monthlyvaccine = FunctionalUtil.getMonthlyFullyVaccineByState(dataset,
                                vaxstate, formattedMonthlyDate.get(j));
                        data[i][j + 2] = monthlyvaccine.toString();
                    }
                }
                
                splabeltable1.setVisible(true);
                splabeltable1.setText("Sum of Monthly Fully Vaccinated people by State");
                splabeltable1.setHorizontalAlignment(JLabel.CENTER);
                
                DefaultTableModel model = new DefaultTableModel(data, table1Columns) {
                    @Override
                    public Class getColumnClass(int column) {
                        return String.class;
                    }

                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                sptable1.setModel(model);
                sptable1.setRowHeight(30);
                Font bigFont = new Font("calibri", Font.BOLD, 17);
                sptable1.getTableHeader().setFont(bigFont);
                
                TableRowSorter trs = new TableRowSorter(model);

                class IntComparator implements Comparator {

                    public int compare(Object o1, Object o2) {
                        Integer int1 = Integer.parseInt(o1.toString());
                        Integer int2 = Integer.parseInt(o2.toString());
                        return int1.compareTo(int2);
                    }

                    public boolean equals(Object o2) {
                        return this.equals(o2);
                    }
                }

                trs.setComparator(2, new IntComparator());
                sptable1.setRowSorter(trs);
                sptable1.getColumnModel().getColumn(0).setPreferredWidth(70);
                
                for(int x=1; x< formattedMonthlyDate.size()+2; x++){
                    if(x==1){
                        sptable1.getColumnModel().getColumn(x).setPreferredWidth(190);
                    } else{
                        sptable1.getColumnModel().getColumn(x).setPreferredWidth(120);
                    }
                }
                
                DefaultTableCellRenderer centerrenderer = new DefaultTableCellRenderer();
                centerrenderer.setHorizontalAlignment(JLabel.CENTER);
                for(int y=0; y< table1Columns.length; y++){
                    sptable1.getColumnModel().getColumn(y).setCellRenderer(centerrenderer);
                }
                
                sptable1.setAutoCreateRowSorter(false);
                sptable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                spscrollpane1.setPreferredSize(new Dimension(550, 250));
                spscrollpane1.getVerticalScrollBar().setValue(0);
                spscrollpane1.getHorizontalScrollBar().setValue(0);
                
                spchart.setVisible(false);
                splabeltable2.setVisible(false);
                spscrollpane2.setVisible(false);
                break;
            }
            case 2: {
                List<VaxState<Date, Integer>> dataset = VaxData2.getAllVaxData();
                
                List<VaxState<Date, Integer>> dataset2 = FunctionalUtil.getStateEqualsName(dataset, "Malaysia");
                
                String[] highestlowestterms = new String[]{"Highest Adult", "Lowest Adult", "Highest Child", "Lowest Child"};
                
                // Monthly Data table
                List<String> formattedWeeklyDate = FunctionalUtil.getReformattedWeeklyDate(dataset2);
                
                String[] table1Columns = new String[formattedWeeklyDate.size() + 2];
                
                table1Columns[0] = "No.";
                table1Columns[1] = "Summary";
                for (int j = 0; j < formattedWeeklyDate.size(); j++) {
                    table1Columns[j + 2] = FunctionalUtil.getReformattedWeeklyBeginDate(dataset2, formattedWeeklyDate.get(j))
                        + " - " + FunctionalUtil.getReformattedWeeklyLastDate(dataset2, formattedWeeklyDate.get(j));
                }
                
                String[][] data = new String[highestlowestterms.length][table1Columns.length];
                
                for (int i = 0; i < highestlowestterms.length; i++) {
                    String vaxstate = highestlowestterms[i];
                    
                    // Table data
                    data[i][0] = String.valueOf(i + 1 + ".");
                    data[i][1] = vaxstate;
                    
                    switch(i){
                        case 0:{
                            for (int j = 0; j < formattedWeeklyDate.size(); j++) {
                                Integer highestadult = FunctionalUtil.getWeeklyHighestDatabyAdult(dataset,
                                        "Malaysia", formattedWeeklyDate.get(j));
                                data[i][j + 2] = highestadult.toString();
                            }
                            break;
                        }
                        case 1:{
                            for (int j = 0; j < formattedWeeklyDate.size(); j++) {
                                Integer lowestadult = FunctionalUtil.getWeeklyLowestDatabyAdult(dataset,
                                        "Malaysia", formattedWeeklyDate.get(j));
                                data[i][j + 2] = lowestadult.toString();
                            }
                            break;
                        }
                        case 2:{
                            for (int j = 0; j < formattedWeeklyDate.size(); j++) {
                                Integer highestchild = FunctionalUtil.getWeeklyHighestDatabyChild(dataset,
                                        "Malaysia", formattedWeeklyDate.get(j));
                                data[i][j + 2] = highestchild.toString();
                            }
                            break;
                        }
                        case 3:{
                            for (int j = 0; j < formattedWeeklyDate.size(); j++) {
                                Integer lowestchild = FunctionalUtil.getWeeklyLowestDatabyChild(dataset,
                                        "Malaysia", formattedWeeklyDate.get(j));
                                data[i][j + 2] = lowestchild.toString();
                            }
                            break;
                        }
                    }
                }
                
                splabeltable1.setVisible(true);
                splabeltable1.setText("Highest or Lowest vaccination taken Weekly for Adult and Child in Malaysia");
                splabeltable1.setHorizontalAlignment(JLabel.CENTER);
                
                DefaultTableModel model = new DefaultTableModel(data, table1Columns) {
                    @Override
                    public Class getColumnClass(int column) {
                        return String.class;
                    }

                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                sptable1.setModel(model);
                sptable1.setRowHeight(30);
                Font bigFont = new Font("calibri", Font.BOLD, 17);
                sptable1.getTableHeader().setFont(bigFont);
                
                TableRowSorter trs = new TableRowSorter(model);

                class IntComparator implements Comparator {

                    public int compare(Object o1, Object o2) {
                        Integer int1 = Integer.parseInt(o1.toString());
                        Integer int2 = Integer.parseInt(o2.toString());
                        return int1.compareTo(int2);
                    }

                    public boolean equals(Object o2) {
                        return this.equals(o2);
                    }
                }

                trs.setComparator(2, new IntComparator());
                sptable1.setRowSorter(trs);
                sptable1.getColumnModel().getColumn(0).setPreferredWidth(50);
                
                for(int x=1; x< formattedWeeklyDate.size()+2; x++){
                    if(x==1){
                        sptable1.getColumnModel().getColumn(x).setPreferredWidth(160);
                    } else{
                        sptable1.getColumnModel().getColumn(x).setPreferredWidth(220);
                    }
                }
                
                DefaultTableCellRenderer centerrenderer = new DefaultTableCellRenderer();
                centerrenderer.setHorizontalAlignment(JLabel.CENTER);
                for(int y=0; y< table1Columns.length; y++){
                    sptable1.getColumnModel().getColumn(y).setCellRenderer(centerrenderer);
                }
                
                sptable1.setAutoCreateRowSorter(false);
                sptable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                spscrollpane1.setPreferredSize(new Dimension(550, 250));
                spscrollpane1.getVerticalScrollBar().setValue(0);
                spscrollpane1.getHorizontalScrollBar().setValue(0);
                
                spchart.setVisible(false);
                splabeltable2.setVisible(false);
                spscrollpane2.setVisible(false);
                break;
            }
            case 3: {
                List<VaxState<Date, Integer>> dataset = VaxData2.getAllVaxData();
                
                List<VaxState<Date, Integer>> dataset2 = FunctionalUtil.getStateEqualsName(dataset, "Malaysia");
                
                String[] vaccinetype = env.VACCINE_TYPES.clone();
                
                // Monthly Data table
                List<String> formattedWeeklyDate = FunctionalUtil.getReformattedWeeklyDate(dataset2);
                
                String[] table1Columns = new String[formattedWeeklyDate.size() + 2];
                
                table1Columns[0] = "No.";
                table1Columns[1] = "Vaccine Type";
                for (int j = 0; j < formattedWeeklyDate.size(); j++) {
                    table1Columns[j + 2] = FunctionalUtil.getReformattedWeeklyBeginDate(dataset2, formattedWeeklyDate.get(j))
                        + " - " + FunctionalUtil.getReformattedWeeklyLastDate(dataset2, formattedWeeklyDate.get(j));
                }
                
                String[][] data = new String[vaccinetype.length][table1Columns.length];
                
                for (int i = 0; i < vaccinetype.length; i++) {
                    String vaxtype = vaccinetype[i];
                    
                    // Table data
                    data[i][0] = String.valueOf(i + 1 + ".");
                    data[i][1] = vaxtype;
                    
                    for (int j = 0; j < formattedWeeklyDate.size(); j++) {
                        Integer vaxcount = FunctionalUtil.getWeeklyTotalVaccinationByVaccineType(dataset,
                                vaxtype, formattedWeeklyDate.get(j));
                        data[i][j + 2] = vaxcount.toString();
                    }
                }
                
                splabeltable1.setVisible(true);
                splabeltable1.setText("Total Weekly Number of Vaccination by Vaccine Type in Malaysia");
                splabeltable1.setHorizontalAlignment(JLabel.CENTER);
                
                DefaultTableModel model = new DefaultTableModel(data, table1Columns) {
                    @Override
                    public Class getColumnClass(int column) {
                        return String.class;
                    }

                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                sptable1.setModel(model);
                sptable1.setRowHeight(30);
                Font bigFont = new Font("calibri", Font.BOLD, 17);
                sptable1.getTableHeader().setFont(bigFont);
                
                TableRowSorter trs = new TableRowSorter(model);

                class IntComparator implements Comparator {

                    public int compare(Object o1, Object o2) {
                        Integer int1 = Integer.parseInt(o1.toString());
                        Integer int2 = Integer.parseInt(o2.toString());
                        return int1.compareTo(int2);
                    }

                    public boolean equals(Object o2) {
                        return this.equals(o2);
                    }
                }

                trs.setComparator(2, new IntComparator());
                sptable1.setRowSorter(trs);
                sptable1.getColumnModel().getColumn(0).setPreferredWidth(50);
                
                for(int x=1; x< formattedWeeklyDate.size()+2; x++){
                    if(x==1){
                        sptable1.getColumnModel().getColumn(x).setPreferredWidth(150);
                    } else{
                        sptable1.getColumnModel().getColumn(x).setPreferredWidth(220);
                    }
                }
                
                DefaultTableCellRenderer centerrenderer = new DefaultTableCellRenderer();
                centerrenderer.setHorizontalAlignment(JLabel.CENTER);
                for(int y=0; y< table1Columns.length; y++){
                    sptable1.getColumnModel().getColumn(y).setCellRenderer(centerrenderer);
                }
                
                sptable1.setAutoCreateRowSorter(false);
                sptable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                spscrollpane1.setPreferredSize(new Dimension(550, 250));
                spscrollpane1.getVerticalScrollBar().setValue(0);
                spscrollpane1.getHorizontalScrollBar().setValue(0);
                
                spchart.setVisible(false);
                splabeltable2.setVisible(false);
                spscrollpane2.setVisible(false);
                break;
            }
        }
    }//GEN-LAST:event_spenterbtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatisticPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatisticPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatisticPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatisticPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatisticPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton spbackbtn;
    private javax.swing.JPanel spchart;
    private javax.swing.JButton spenterbtn;
    private javax.swing.JComboBox<String> spfiltercb;
    private javax.swing.JLabel splabeltable1;
    private javax.swing.JLabel splabeltable2;
    private javax.swing.JScrollPane spmainscrollpane;
    private javax.swing.JPanel sppanel;
    private javax.swing.JScrollPane spscrollpane1;
    private javax.swing.JScrollPane spscrollpane2;
    private javax.swing.JTable sptable1;
    private javax.swing.JTable sptable2;
    private javax.swing.JLabel sptitle;
    private javax.swing.JLabel sptitlestudent;
    // End of variables declaration//GEN-END:variables

    private void ChartPanel(JFreeChart chart) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
